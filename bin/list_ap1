#!/usr/bin/env python
"""
Search a list of apogee files in mjd directory

list_ap1  (for current mjd)
list_ap1 -m  <mjd>  (for other mjd)
   (for example: list_ap1 -m  56462)

History 2013: 
06/22  created by EM
06/25  fixed mjd calculation
06/26  added type of arc lamps 
09/09  added relative position of spectral line #1
09/18  changed spectral relative position to line #2
   xcL2=[941.1758, 941.6995]   #  center for Line=2 [A,B]
   calculate for mjd=56531  (A for files *3, *14), (B  for *4, *16)
Testing: 
./list_ap2.py -m  56494  # before  summer shakedown
         4 00:17  09320004  ArcLamp (thar) 12  A   11-6306   a-b-c   -1.0   None
./list_ap2.py -m  56531  # reference  
         3 00:22  09690003  ArcLamp (thar) 12  A   11-6592   a-b-c    0.0   None
./list_ap2.py -m 56553  # after summer shakedown 
        3 23:43  09910003  ArcLamp (thar) 12  A   12-6518   a-b-c   -0.0   None
"""

import glob
import pyfits, numpy, scipy
import sys, os.path
import argparse
import datetime as dt
import time

#xcL2=[941.1758, 941.6995]   #  center for Line=2 [A,B]  # how many digits to use? 
xcL2=[941.17, 941.70]   #  center for Line=2 [A,B]

# ....
def getSpe(data, l1,l2): 
  sz1=data.shape 
  def ds9topy(p):  return [p[1],p[0]]
  p1=[0,l1];  p1conv=ds9topy(p1)
  p2=[sz1[1], l2];  p2conv=ds9topy(p2)
  dat1=data[p1conv[0]:p2conv[0],:]  # select lime of spectra
  spe=numpy.average(dat1, axis=0)    # average all spectra in that line
  return spe

#...
def getOffset(f, sdth):
    import scipy.optimize

    if  not os.path.exists(f):  return  "--"
    
    if sdth=="A": xc=xcL2[0]   
    elif sdth=="B": xc=xcL2[1]  
    else: 
       print "something wrong in header with DITHPIX value "
       return "??"

    if os.path.exists(f):
      hdulist=pyfits.open(f,'readonly')
      hdr = hdulist[0].header
      data=hdulist[0].data
      hdulist.close()
      spe= getSpe(data,1200, 1500) # select band and average spectra to one spectrum
      p0 = scipy.c_[7300, xc, 1.36]  # start fitting params
      pix=scipy.linspace(0, spe.shape[0], num=spe.shape[0])
      fitfunc = lambda p0, x: p0[0]*scipy.exp(-(x-p0[1])**2/(2.0*p0[2]**2))
      errfunc = lambda p, x, y: fitfunc(p,x)-y
      p1, success = scipy.optimize.leastsq(errfunc, p0.copy()[0],args=(pix,spe))
      if  success:  
          offset="%4.1f" % (p1[1] - p0[0][1])
          if offset=="-0.0": offset=" 0.0"
      else: return "??"
    return  offset 

#...
def  list_one_file(i,f,mjd):
    qrfile="/data/apogee/quickred/%s/ap2D-a-%s.fits.fz" % (mjd,f[33:41])
    fop=f
    if os.path.exists(qrfile):  fop=qrfile
    hdulist=pyfits.open(fop,'readonly')
    hdr = hdulist[0].header
    hdulist.close()
    
    ct=hdr.get('CARTID');  plate=hdr.get('PLATEID')  
    if ct == None: ct="--" 
    if plate==None: plate="----"

    dth= float(hdr['DITHPIX'])
    if dth==12.994: sdth="A"
    elif dth==13.499: sdth="B"
    else: sdth="?"    
    
    imtype= hdr.get('IMAGETYP')
    offset="-"
    if imtype=="ArcLamp":
        if hdr.get('LAMPUNE')==1:
           imtype=imtype+" (une)"
        if hdr.get('LAMPTHAR')==1:
           imtype=imtype+" (thar)"
           offset=getOffset(f, sdth)
           
    imtype=imtype.center(14)
#    une=hdr.get('LAMPUNE') 
#    thar=hdr.get('LAMPTHAR')
#    qrtz=hdr.get('LAMPQRTZ')
     
    ss1="%3i "% (i+1)  #i
    ss1=ss1+"%s  " % (hdr['DATE-OBS'][11:16]) # UT time
    ss1=ss1+"%s  " % (f[33:41])  # exp number
    ss1=ss1+"%s " % (imtype)  # image type
    ss1=ss1+"%2i  " %  hdr.get('NFRAMES')  # nframes
    ss1=ss1+"%s  " % (sdth)  # dither            
    ss1=ss1+" %2s-%4s   " % (ct, plate)

    arcA="/data/apogee/archive/%s/apR-%s-%s.apz"%(mjd,"a",f[33:41])
    arcB="/data/apogee/archive/%s/apR-%s-%s.apz"%(mjd,"b",f[33:41])
    arcC="/data/apogee/archive/%s/apR-%s-%s.apz"%(mjd,"c",f[33:41])    
    arc=list("x-x-x")
    if os.path.exists(arcA): arc[0]="a" 
    if os.path.exists(arcB): arc[2]="b" 
    if os.path.exists(arcC): arc[4]="c" 
    ss1=ss1+"%s  "%"".join(arc)    # archive file existence

    ss1=ss1+"%5s   " % (offset)  # offset 

    ss1=ss1+ "%s" % hdr["OBSCMNT"][0:20]  # comment       
     
    print ss1
#...

if __name__ == "__main__":
    TAI_UTC =34
    sjd1=(time.time() + TAI_UTC) / 86400.0 + 40587.3
    sjd= int (sjd1)
        
    desc = 'list of files for one night of apogee observations'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-m', '--mjd', 
           help='enter mjd, default is current mjd',    
     #      help='enter mjd, default is current mjd=%s' % int(sjd),
           default=int(sjd), type=int)
    args = parser.parse_args()    
    mjd=args.mjd
    
    pp="/data/apogee/utr_cdr/"
    fNames="%s%s/apRaw-%s.fits"%(pp,mjd,"*")
    print "   raw_data: ", fNames
    ppqr="/data/apogee/quickred/%s/ap2D-a-*.fits.fz" % (mjd)
    print "   quick_red:", ppqr
    pparc="/data/apogee/archive/%s/apR-[a,b,c]-*.apz" % (mjd)
    print "   archive:  ", pparc
    
    files = glob.glob(fNames)
    
    line="-"*80
    print line
    header=" i   UT   File/Exp   Imtype     Nread Dth  Ct-Plate Archiv  Offset Comment"
    print header  
    print line 
    nfiles=len(files)
    if nfiles==0: 
        print " - no files found -- " 
    else: 
        for i,f in enumerate(sorted(files)):
             list_one_file(i,f, mjd) 
    print line
    
    ss="     THAR Line Centers for A/B, pix: [%5.1f, %5.1f]" % (xcL2[0], xcL2[1])
    print ss, "\n"
#    print "Offset: THAR Arc reference: mjd=56529, A-09670004 x_LineCenter=44.0 pix, "
#    print "                                     B-09670006 x_LineCenter=44.5 pix"
    
#...
